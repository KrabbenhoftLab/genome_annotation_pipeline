#!/bin/bash
## v0.3.2
## Pipeline to annotate genome using BRAKER and GeMoMa
## authors: Dan MacGuigan, Nate Backenstose, Christopher Osborne

# Looking for the input variables? The are now located in the config.txt file. 
# No need to modify this script unless troubleshooting.

############################################################
# Help                                                     #
# DO NOT MODIFY                                            #
############################################################
Help()
{
   # Display Help
   echo ""
   echo "Krabbenhoft Lab pipline for genome annotation using BRAKER and GeMoMa"
   echo "authors: Dan MacGuigan*, Nate Backenstose, Christopher Osborne"
   echo "*dmacguig@buffalo.edu"
   echo ""
   echo "Before running this pipeline, be sure to modify the input variables in 'config.txt'"
   echo ""
   echo "Annotation pipeline steps"
   echo "Step 1: RepeatModeler [Bottlerocket]"
   echo "Step 2: RepeatMasker [Bottlerocket]"
   echo "Step 3: soft mask genome [Bottlerocket]"
   echo "Step 4: map RNA-seq reads [Bottlerocket]"
   echo "        NOTE: HISAT2 is optional but recommended. It requires Illumina RNA-seq data,"
   echo "        preferably from the species you are annotating."
   echo "        After Step 4, you must copy your ANNOTATION_DIR_BOTTLEROCKET to the cluster"
   echo "        and specify full path of the copied directory as the ANNOTATION_DIR_CLUSTER"
   echo "        variable in the config file."
   echo "Step 5: download reference genome and proteome information from NCBI [cluster]"
   echo "        Optional if you already have reference genome data for BRAKER and GeMoMa."
   echo "Step 6: BRAKER [cluster]"
   echo "        If you skipped step 4, BRAKER will automatically use only protein evidence"
   echo "        in PROT_FASTA."
   echo "Step 7: GeMoMa [cluster]"
   echo "Step 8: merge BRAKER and GeMoMa annotations with EvidenceModeler [cluster]"
   echo "Step 9: run eggNOG mapper to add functional annotations"
   echo ""
   echo "Options:"
   echo "s   Which step would you like to run? Enter number 1 through 7"
   echo "c   Config text file"
   echo "v   Check version of the main script and all subscripts"
   echo "h   Print this Help"
   echo ""
   echo "Usage:"
   echo "./genome-annotation -s 1 -c config.txt"
}

############################################################
# Version check                                            #
# DO NOT MODIFY                                            #
############################################################
Version()
{
	echo ""
	echo "Version check, all scripts should have the same version number."
	echo "If some scripts do not have the same version number, download"
	echo "the latest copies from the KrabLab GitHub repository. If the"
	echo "version conflict persists, please contact Dan MacGuigan at"
	echo "dmacguig@buffalo.edu"
	echo ""
	ver=$( sed '2q;d' ./genome-annotation | cut -f2 -d" " )
	echo "${ver} -> ./genome-annotation "
	for filename in ./scripts/*.sh
	do
		ver=$( sed '2q;d' ${filename} | cut -f2 -d" " )
		echo "${ver} -> ${filename}"
	done
	echo ""
	exit
}

############################################################
# Process the input options. Add options as needed.        #
# DO NOT MODIFY                                            #
############################################################
# Get the options
while getopts "hvs:c:" option; do
   case ${option} in
      h) # display Help
         Help
         exit;;
      v)
         Version
         ;;
      s) # run a step in the pipeline
         step=$OPTARG
         echo "running step ${step}"
         ;;
      c) # source the variables set in the config file supplied by the user
         source $OPTARG
         ;;
      \?) # Invalid option
        echo "Error: Invalid option"
        Help
        exit;;
   esac
done

##############################################################
# CHECK TO MAKE SURE ALL VARIABLES ARE SET                   #
##############################################################

if [ -z ${ANNOTATION_DIR_BOTTLEROCKET+x} ]; then echo "ANNOTATION_DIR_BOTTLEROCKET is unset"; echo "please ensure all variables are specified in your config file"; exit 1; else echo "ANNOTATION_DIR_BOTTLEROCKET is set to '$ANNOTATION_DIR_BOTTLEROCKET'"; fi
if [ -z ${ANNOTATION_DIR_CLUSTER+x} ]; then echo "ANNOTATION_DIR_CLUSTER is unset"; echo "please ensure all variables are specified in your config file"; exit 1; else echo "ANNOTATION_DIR_CLUSTER is set to '$ANNOTATION_DIR_CLUSTER'"; fi
if [ -z ${SPECIES+x} ]; then echo "SPECIES is unset"; echo "please ensure all variables are specified in your config file"; exit 1; else echo "SPECIES is set to '$SPECIES'"; fi
if [ -z ${GENOME_DIR+x} ]; then echo "GENOME_DIR is unset"; echo "please ensure all variables are specified in your config file"; exit 1; else echo "GENOME_DIR is set to '$GENOME_DIR'"; fi
if [ -z ${GENOME_FILE+x} ]; then echo "GENOME_FILE is unset"; echo "please ensure all variables are specified in your config file"; exit 1; else echo "GENOME_FILE is set to '$GENOME_FILE'"; fi
if [ -z ${REPEAT_LIBRARY_NAME+x} ]; then echo "REPEAT_LIBRARY_NAME is unset"; echo "please ensure all variables are specified in your config file"; exit 1; else echo "REPEAT_LIBRARY_NAME is set to '$REPEAT_LIBRARY_NAME'"; fi
if [ -z ${RMODEL_THREADS+x} ]; then echo "RMODEL_THREADS is unset"; echo "please ensure all variables are specified in your config file"; exit 1; else echo "RMODEL_THREADS is set to '$RMODEL_THREADS'"; fi
if [ -z ${RM_SPECIES+x} ]; then echo "RM_SPECIES is unset"; echo "please ensure all variables are specified in your config file"; exit 1; else echo "RM_SPECIES is set to '$RM_SPECIES'"; fi
if [ -z ${BLAST_CPUS+x} ]; then echo "BLAST_CPUS is unset"; echo "please ensure all variables are specified in your config file"; exit 1; else echo "BLAST_CPUS is set to '$BLAST_CPUS'"; fi
if [ -z ${MASKED_GENOME_FILE+x} ]; then echo "MASKED_GENOME_FILE is unset"; echo "please ensure all variables are specified in your config file"; exit 1; else echo "MASKED_GENOME_FILE is set to '$MASKED_GENOME_FILE'"; fi
if [ -z ${RNA_DIR+x} ]; then echo "RNA_DIR is unset"; echo "please ensure all variables are specified in your config file"; exit 1; else echo "RNA_DIR is set to '$RNA_DIR'"; fi
if [ -z ${RNA_FILES+x} ]; then echo "RNA_FILES is unset"; echo "please ensure all variables are specified in your config file"; exit 1; else echo "RNA_FILES is set to '$RNA_FILES'"; fi
if [ -z ${HISAT_THREADS+x} ]; then echo "HISAT_THREADS is unset"; echo "please ensure all variables are specified in your config file"; exit 1; else echo "HISAT_THREADS is set to '$HISAT_THREADS'"; fi



##############################################################
# PIPELINE STEPS                                             #
# RUN STEPS 1-4 on Bottlerocket                              #
# RUN STEPS 5-8 on the cluster                               #
##############################################################

### STEP 1 ###
## GENERATE CUSTOM REPEAT LIBRARY
## on the KrabLab Bottlerocket
if [[ "${step}" == 1 ]]; then
	mkdir -p "${ANNOTATION_DIR_BOTTLEROCKET}/logFiles" # create logFiles directory
	bash "${ANNOTATION_DIR_BOTTLEROCKET}"/scripts/generate_repeat_lib.sh ${SPECIES} ${GENOME_DIR} ${GENOME_FILE} ${REPEAT_LIBRARY_NAME} ${RMODEL_THREADS} > "${ANNOTATION_DIR_BOTTLEROCKET}/logFiles/${SPECIES}_generate_repeat_lib.out" 2> "${ANNOTATION_DIR_BOTTLEROCKET}/logFiles/${SPECIES}_generate_repeat_lib.error"
fi

### STEP 2 ###
## RUN REPEAT MASKER
## on the KrabLab Bottlerocket
## use the custom repeat library generated in step 1A
## and species/clade specified by RM_SPECIES
if [[ "${step}" == 2 ]]; then
	mkdir -p "${ANNOTATION_DIR_BOTTLEROCKET}/logFiles" # create logFiles directory
	source activate maker-3.01.03
	bash "${ANNOTATION_DIR_BOTTLEROCKET}"/scripts/run_repeatMasker.sh ${SPECIES} ${GENOME_DIR} ${GENOME_FILE} ${REPEAT_LIBRARY_NAME} ${RMASK_THREADS} ${RM_SPECIES} ${BLAST_CPUS} > "${ANNOTATION_DIR_BOTTLEROCKET}/logFiles/${SPECIES}_repeatMasker.out" 2> "${ANNOTATION_DIR_BOTTLEROCKET}/logFiles/${SPECIES}_repeatMasker.error"
fi

### STEP 3 ###
## RUN BEDTOOLS TO SOFT MASK GENOME
## on the KrabLab Bottlerocket
## using the repeat GFF generated by step 1B
if [[ "${step}" == 3 ]]; then
	mkdir -p "${ANNOTATION_DIR_BOTTLEROCKET}/logFiles" # create logFiles directory
	bedtools maskfasta -bed "${ANNOTATION_DIR_BOTTLEROCKET}/${SPECIES}_RepeatMasker/final_repeat_mask/${SPECIES}.final_repeat_mask.gff3" -fi "${ANNOTATION_DIR_BOTTLEROCKET}/${GENOME_DIR}/${GENOME_FILE}" -fo "${ANNOTATION_DIR_BOTTLEROCKET}/${GENOME_DIR}/${MASKED_GENOME_FILE}" -soft
fi

### STEP 4 ###
## RUN HISAT2 TO MAP RNA-seq READS
## on the KrabLab Bottlerocket
## use soft masked genome from step 1C
if [[ "${step}" == 4 ]]; then
	mkdir -p "${ANNOTATION_DIR_BOTTLEROCKET}/logFiles" # create logFiles directory
	bash "${ANNOTATION_DIR_BOTTLEROCKET}"/scripts/run_HISAT2.sh ${SPECIES} ${GENOME_DIR} ${MASKED_GENOME_FILE} ${RNA_DIR} ${RNA_FILES} ${HISAT_THREADS} > "${ANNOTATION_DIR_BOTTLEROCKET}/logFiles/${SPECIES}_HISAT2.out" 2> "${ANNOTATION_DIR_BOTTLEROCKET}/logFiles/${SPECIES}_HISAT2.error"
fi

### STEP 5 ###
## DOWNLOAD REFERENCE DATA FROM NCBI
## on the UB CCR Vortex cluster
if [[ "${step}" == 5 ]]; then
	mkdir -p "${ANNOTATION_DIR_CLUSTER}/logFiles" # create logFiles directory
	sbatch --job-name="${SPECIES}_NCBI_DOWNLOAD" --output="${ANNOTATION_DIR_CLUSTER}/logFiles/${SPECIES}_NCBI_DOWNLOAD.out" --error="${ANNOTATION_DIR_CLUSTER}/logFiles/${SPECIES}_NCBI_DOWNLOAD.err" ./scripts/download-ncbi-genomes.sh ${NCBI_TARGET_GENOMES} ${NCBI_DOWNLOAD_DIR} ${ANNOTATION_DIR_CLUSTER}
fi

### STEP 6 ###
## RUN BRAKER
## on the UB CCR Vortex cluster
if [[ "${step}" == 6 ]]; then
	mkdir -p "${ANNOTATION_DIR_CLUSTER}/logFiles" # create logFiles directory
	sbatch --job-name="${SPECIES}_BRAKER" --ntasks-per-node=${BRAKER_THREADS} --mem=${BRAKER_RAM} --output="${ANNOTATION_DIR_CLUSTER}/logFiles/${SPECIES}_BRAKER.out" --error="${ANNOTATION_DIR_CLUSTER}/logFiles/${SPECIES}_BRAKER.err" ./scripts/run_BRAKER.sh ${SPECIES} ${GENOME_DIR} ${MASKED_GENOME_FILE} ${PROT_FASTA} ${BRAKER_THREADS} ${ANNOTATION_DIR_CLUSTER} ${AUGUSTUS_SPECIES_NAME}
fi

### STEP 7 ###
## RUN GEMOMA
## on the UB CCR Vortex cluster
if [[ "${step}" == 7 ]]; then
	mkdir -p "${ANNOTATION_DIR_CLUSTER}/logFiles" # create logFiles directory
	if [[ "${USE_HISAT2_RNA_SEQ}" == "YES" ]]; then
		sbatch --job-name="${SPECIES}_GEMOMA" --ntasks-per-node=${GEMOMA_THREADS} --mem=${GEMOMA_JOB_RAM} --output="${ANNOTATION_DIR_CLUSTER}/logFiles/${SPECIES}_GEMOMA.out" --error="${ANNOTATION_DIR_CLUSTER}/logFiles/${SPECIES}_GEMOMA.err" ./scripts/run_GEMOMA_RNA-seq.sh ${SPECIES} ${GENOME_DIR} ${MASKED_GENOME_FILE} ${GEMOMA_THREADS} ${GEMOMA_RAM} ${ANNOTATION_DIR_CLUSTER} ${GEMOMA_REFS} ${USE_HISAT2_RNA_SEQ} ${HISAT2_RNA_LIB_TYPE} ${USE_CUSTOM_RNA_SEQ} ${CUSTOM_RNA_BAM} ${CUSTOM_RNA_LIB_TYPE}
	elif [[ "${USE_CUSTOM_RNA_SEQ}" == "YES" ]]; then
		sbatch --job-name="${SPECIES}_GEMOMA" --ntasks-per-node=${GEMOMA_THREADS} --mem=${GEMOMA_JOB_RAM} --output="${ANNOTATION_DIR_CLUSTER}/logFiles/${SPECIES}_GEMOMA.out" --error="${ANNOTATION_DIR_CLUSTER}/logFiles/${SPECIES}_GEMOMA.err" ./scripts/run_GEMOMA_RNA-seq.sh ${SPECIES} ${GENOME_DIR} ${MASKED_GENOME_FILE} ${GEMOMA_THREADS} ${GEMOMA_RAM} ${ANNOTATION_DIR_CLUSTER} ${GEMOMA_REFS} ${USE_HISAT2_RNA_SEQ} ${HISAT2_RNA_LIB_TYPE} ${USE_CUSTOM_RNA_SEQ} ${CUSTOM_RNA_BAM} ${CUSTOM_RNA_LIB_TYPE}
	else
		sbatch --job-name="${SPECIES}_GEMOMA" --ntasks-per-node=${GEMOMA_THREADS} --mem=${GEMOMA_JOB_RAM} --output="${ANNOTATION_DIR_CLUSTER}/logFiles/${SPECIES}_GEMOMA.out" --error="${ANNOTATION_DIR_CLUSTER}/logFiles/${SPECIES}_GEMOMA.err" ./scripts/run_GEMOMA.sh ${SPECIES} ${GENOME_DIR} ${MASKED_GENOME_FILE} ${GEMOMA_THREADS} ${GEMOMA_RAM} ${ANNOTATION_DIR_CLUSTER} ${GEMOMA_REFS}
		
	fi
fi

### STEP 8 ###
## MERGE GEMOMA AND BRAKER ANNOTATIONS WITH EVIDENCEMODELER
## on the UB CCR Vortex cluster
if [[ "${step}" == 8 ]]; then
	mkdir -p "${ANNOTATION_DIR_CLUSTER}/logFiles" # create logFiles directory
	echo "converting BRAKER and GeMoMa files for EVM"
	cd ${ANNOTATION_DIR_CLUSTER} # create directory for EVM
	mkdir -p ${SPECIES}_EVM_B${BRAKER_WEIGHT}_G${GEMOMA_WEIGHT}
	mkdir -p ${SPECIES}_EVM_B${BRAKER_WEIGHT}_G${GEMOMA_WEIGHT}/evidence
	cd ${SPECIES}_EVM_B${BRAKER_WEIGHT}_G${GEMOMA_WEIGHT}/evidence
	# make copies of gene predictions and merge
	cp ${ANNOTATION_DIR_CLUSTER}/${SPECIES}_BRAKER/braker.gtf braker.gtf
	cp ${ANNOTATION_DIR_CLUSTER}/${SPECIES}_GeMoMa/GeMoMa_combined/final_annotation.gff gemoma.gff3
	# convert input files to EVM format
	/projects/academic/tkrabben/software/EvidenceModeler/EVidenceModeler/EvmUtils/misc/GeMoMa_gff_to_gff3.pl gemoma.gff3 > gemoma.EVM.gff3
	/projects/academic/tkrabben/software/EvidenceModeler/EVidenceModeler/EvmUtils/misc/braker_GTF_to_EVM_GFF3.pl braker.gtf > braker.EVM.gff3
	cd ${ANNOTATION_DIR_CLUSTER}
	echo "submitting EVM job"
	sbatch --job-name="${SPECIES}_EVM" --ntasks-per-node=${EVM_THREADS} --mem=${EVM_RAM} --output="${ANNOTATION_DIR_CLUSTER}/logFiles/${SPECIES}_B${BRAKER_WEIGHT}_G${GEMOMA_WEIGHT}_EVM.out" --error="${ANNOTATION_DIR_CLUSTER}/logFiles/${SPECIES}_B${BRAKER_WEIGHT}_G${GEMOMA_WEIGHT}_EVM.err" ./scripts/run_EVM.sh ${SPECIES} ${GENOME_DIR} ${MASKED_GENOME_FILE} ${ANNOTATION_DIR_CLUSTER} ${BRAKER_WEIGHT} ${GEMOMA_WEIGHT} ${EVM_THREADS}
fi

### STEP 9 ###
## RUN EGGNOG MAPPER TO GENERATE FUNCTIONAL ANNOTATIONS FOR THE EVM GENE SETS
## on the UB CCR Vortex cluster
if [[ "${step}" == 9 ]]; then
	cd ${ANNOTATION_DIR_CLUSTER}
	mkdir -p ${SPECIES}_EVM_B${BRAKER_WEIGHT_EGG}_G${GEMOMA_WEIGHT_EGG}_eggNOG
	echo "submitting eggNOG mapper job"
	sbatch --job-name="${SPECIES}_eggNOG" --ntasks-per-node=${EGG_THREADS} --mem=${EGG_RAM} --output="${ANNOTATION_DIR_CLUSTER}/logFiles/${SPECIES}_B${BRAKER_WEIGHT_EGG}_G${GEMOMA_WEIGHT_EGG}_EVM_eggNOG.out" --error="${ANNOTATION_DIR_CLUSTER}/logFiles/${SPECIES}_B${BRAKER_WEIGHT_EGG}_G${GEMOMA_WEIGHT_EGG}_EVM_eggNOG.err" ./scripts/run_eggNOG.sh ${SPECIES}  ${ANNOTATION_DIR_CLUSTER} ${BRAKER_WEIGHT} ${GEMOMA_WEIGHT} ${EGG_THREADS} ${EGGNOG_OPTIONS}
fi
