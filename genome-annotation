#!/bin/bash
## v0.4.0
## Pipeline to annotate genome using BRAKER and GeMoMa
## authors: Dan MacGuigan, Nate Backenstose, Christopher Osborne

# Looking for the input variables? The are now located in the config.txt file. 
# No need to modify this script unless troubleshooting.

############################################################
# Help                                                     #
# DO NOT MODIFY                                            #
############################################################
Help()
{
   # Display Help
   echo ""
   echo "Krabbenhoft Lab pipline for genome annotation using BRAKER and GeMoMa"
   echo "authors: Dan MacGuigan*, Nate Backenstose, Christopher Osborne"
   echo "*dmacguig@buffalo.edu"
   echo ""
   echo "Before running this pipeline, be sure to modify the input variables in 'config.txt'"
   echo ""
   echo "Annotation pipeline steps"
   echo "Step 1: RepeatModeler [Bottlerocket or cluster]"
   echo "Step 2: RepeatMasker [Bottlerocket or cluster]"
   echo "Step 3: soft mask genome [Bottlerocket or cluster]"
   echo "Step 4: map RNA-seq reads [Bottlerocket or cluster]"
   echo "        NOTE: HISAT2 is optional but recommended. It requires Illumina RNA-seq data,"
   echo "        preferably from the species you are annotating."
   echo "        After Step 4, you must copy your ANNOTATION_DIR_BOTTLEROCKET to the cluster"
   echo "        and specify full path of the copied directory as the ANNOTATION_DIR_CLUSTER"
   echo "        variable in the config file."
   echo "Step 5: download reference genome and proteome information from NCBI [cluster]"
   echo "        Optional if you already have reference genome data for BRAKER and GeMoMa."
   echo "Step 6: BRAKER [cluster]"
   echo "        If you skipped step 4, BRAKER will automatically use only protein evidence"
   echo "        in PROT_FASTA."
   echo "Step 7: GeMoMa [cluster]"
   echo "Step 8: merge BRAKER and GeMoMa annotations with EvidenceModeler [cluster]"
   echo "Step 9: run eggNOG mapper to add functional annotations"
   echo ""
   echo "Options:"
   echo "s   Which step would you like to run? Enter number 1 through 7"
   echo "c   Config text file"
   echo "v   Check version of the main script and all subscripts"
   echo "h   Print this Help"
   echo ""
   echo "Usage:"
   echo "./genome-annotation -s 1 -c config.txt"
}

############################################################
# Version check                                            #
# DO NOT MODIFY                                            #
############################################################
Version()
{
	echo ""
	echo "Version check, all scripts should have the same version number."
	echo "If some scripts do not have the same version number, download"
	echo "the latest copies from the KrabLab GitHub repository. If the"
	echo "version conflict persists, please contact Dan MacGuigan at"
	echo "dmacguig@buffalo.edu"
	echo ""
	ver=$( sed '2q;d' ./genome-annotation | cut -f2 -d" " )
	echo "${ver} -> ./genome-annotation "
	for filename in ./scripts/*.sh
	do
		ver=$( sed '2q;d' ${filename} | cut -f2 -d" " )
		echo "${ver} -> ${filename}"
	done
	echo ""
	exit
}

############################################################
# Process the input options. Add options as needed.        #
# DO NOT MODIFY                                            #
############################################################
# Get the options
while getopts "hvs:c:" option; do
   case ${option} in
      h) # display Help
         Help
         exit;;
      v)
         Version
         ;;
      s) # run a step in the pipeline
         step=$OPTARG
         echo "running step ${step}"
         ;;
      c) # source the variables set in the config file supplied by the user
         source $OPTARG
         ;;
      \?) # Invalid option
        echo "Error: Invalid option"
        Help
        exit;;
   esac
done

##############################################################
# PIPELINE STEPS                                             #
# RUN STEPS 1-4 on Bottlerocket                              #
# RUN STEPS 5-8 on the cluster                               #
##############################################################

### STEP 1 ###
## GENERATE CUSTOM REPEAT LIBRARY
## on the KrabLab Bottlerocket
## or on the UB CCR Vortex cluster
if [[ "${step}" == 1 ]]; then
	echo ""
	echo "INPUT VARIABLES as specified in your config file:"
	if [ -z ${ANNOTATION_DIR_BOTTLEROCKET+x} ]; then echo "  ANNOTATION_DIR_BOTTLEROCKET is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  ANNOTATION_DIR_BOTTLEROCKET='$ANNOTATION_DIR_BOTTLEROCKET'"; fi
	if [ -z ${ANNOTATION_DIR_CLUSTER+x} ]; then echo "  ANNOTATION_DIR_CLUSTER is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  ANNOTATION_DIR_CLUSTER='$ANNOTATION_DIR_CLUSTER'"; fi
	if [ -z ${SPECIES+x} ]; then echo "  SPECIES is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  SPECIES='$SPECIES'"; fi
	if [ -z ${GENOME_DIR+x} ]; then echo "  GENOME_DIR is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  GENOME_DIR='$GENOME_DIR'"; fi
	if [ -z ${GENOME_FILE+x} ]; then echo "  GENOME_FILE is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  GENOME_FILE='$GENOME_FILE'"; fi
	if [ -z ${REPEAT_LIBRARY_NAME+x} ]; then echo "  REPEAT_LIBRARY_NAME is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  REPEAT_LIBRARY_NAME='$REPEAT_LIBRARY_NAME'"; fi
	if [ -z ${RMODEL_THREADS+x} ]; then echo "  RMODEL_THREADS is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  RMODEL_THREADS='$RMODEL_THREADS'"; fi
	if [ -z ${RMODEL_RAM+x} ]; then echo "  RMODEL_RAM is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  RMODEL_RAM='$RMODEL_RAM'"; fi
	if [ -z ${RUN_LTR+x} ]; then echo "  RUN_LTR is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  RUN_LTR='$RUN_LTR'"; fi
	if [ -z ${USE_CLUSTER_RM+x} ]; then echo "  USE_CLUSTER_RM is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  USE_CLUSTER_RM='$USE_CLUSTER_RM'"; fi
	if [ -z ${CONTINUE_RMODEL+x} ]; then echo "  CONTINUE_RMODEL is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  CONTINUE_RMODEL='$CONTINUE_RMODEL'"; fi
	if [ -z ${CONTINUE_RMODEL_DIR+x} ]; then echo "  CONTINUE_RMODEL_DIR is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  CONTINUE_RMODEL_DIR='$CONTINUE_RMODEL_DIR'"; fi
	echo ""
	if [ ${USE_CLUSTER_RM} = "yes" ]
	then
		dos2unix ${ANNOTATION_DIR_CLUSTER}/${GENOME_DIR}/${GENOME_FILE} # make sure genome has UNIX line endings
		echo "starting RepeatModeler on the cluster"
		mkdir -p "${ANNOTATION_DIR_CLUSTER}/logFiles" # create logFiles directory
		sbatch --job-name="${SPECIES}_RMODEL" --ntasks-per-node=${RMODEL_THREADS} --mem=${RMODEL_RAM} --output="${ANNOTATION_DIR_CLUSTER}/logFiles/${SPECIES}_generate_repeat_lib.out" --error="${ANNOTATION_DIR_CLUSTER}/logFiles/${SPECIES}_generate_repeat_lib.err" ./scripts/generate_repeat_lib_cluster.sh ${SPECIES} ${ANNOTATION_DIR_CLUSTER} ${GENOME_DIR} ${GENOME_FILE} ${REPEAT_LIBRARY_NAME} ${RMODEL_THREADS} ${RUN_LTR} ${CONTINUE_RMODEL} ${CONTINUE_RMODEL_DIR}
	else
		dos2unix ${ANNOTATION_DIR_BOTTLEROCKET}/${GENOME_DIR}/${GENOME_FILE} # make sure genome has UNIX line endings
		echo "starting RepeatModeler on Bottlerocker"
		mkdir -p "${ANNOTATION_DIR_BOTTLEROCKET}/logFiles" # create logFiles directory
		bash "${ANNOTATION_DIR_BOTTLEROCKET}"/scripts/generate_repeat_lib.sh ${SPECIES} ${GENOME_DIR} ${GENOME_FILE} ${REPEAT_LIBRARY_NAME} ${RMODEL_THREADS} > "${ANNOTATION_DIR_BOTTLEROCKET}/logFiles/${SPECIES}_generate_repeat_lib.out" 2> "${ANNOTATION_DIR_BOTTLEROCKET}/logFiles/${SPECIES}_generate_repeat_lib.error"
	fi
fi

### STEP 2 ###
## RUN REPEAT MASKER
## on the KrabLab Bottlerocket
## or on the UB CCR Vortex cluster
## use the custom repeat library generated in step 1
## and species/clade specified by RM_SPECIES
if [[ "${step}" == 2 ]]; then
	echo ""
	echo "INPUT VARIABLES as specified in your config file:"
	if [ -z ${ANNOTATION_DIR_BOTTLEROCKET+x} ]; then echo "  ANNOTATION_DIR_BOTTLEROCKET is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  ANNOTATION_DIR_BOTTLEROCKET='$ANNOTATION_DIR_BOTTLEROCKET'"; fi
	if [ -z ${ANNOTATION_DIR_CLUSTER+x} ]; then echo "  ANNOTATION_DIR_CLUSTER is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  ANNOTATION_DIR_CLUSTER='$ANNOTATION_DIR_CLUSTER'"; fi
	if [ -z ${SPECIES+x} ]; then echo "  SPECIES is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  SPECIES='$SPECIES'"; fi
	if [ -z ${GENOME_DIR+x} ]; then echo "  GENOME_DIR is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  GENOME_DIR='$GENOME_DIR'"; fi
	if [ -z ${GENOME_FILE+x} ]; then echo "  GENOME_FILE is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  GENOME_FILE='$GENOME_FILE'"; fi
	if [ -z ${RMASK_THREADS+x} ]; then echo "  RMASK_THREADS is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  RMASK_THREADS='$RMASK_THREADS'"; fi
	if [ -z ${REPEAT_LIBRARY_NAME+x} ]; then echo "  REPEAT_LIBRARY_NAME is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  REPEAT_LIBRARY_NAME='$REPEAT_LIBRARY_NAME'"; fi
	if [ -z ${RM_SPECIES+x} ]; then echo "  RM_SPECIES is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  RM_SPECIES='$RM_SPECIES'"; fi
	if [ -z ${RMASK_RAM+x} ]; then echo "  RMASK_RAM is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  RMASK_RAM='$RMASK_RAM'"; fi
	if [ -z ${USE_CLUSTER_RM+x} ]; then echo "  USE_CLUSTER_RM is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  USE_CLUSTER_RM='$USE_CLUSTER_RM'"; fi
	echo ""
	if [ ${USE_CLUSTER_RM} = "yes" ]
	then
		mkdir -p "${ANNOTATION_DIR_CLUSTER}/logFiles" # create logFiles directory
		echo "starting RepeatMasker on the cluster"
		sbatch --job-name="${SPECIES}_RMASK" --ntasks-per-node=${RMASK_THREADS} --mem=${RMASK_RAM} --output="${ANNOTATION_DIR_CLUSTER}/logFiles/${SPECIES}_repeatMasker.out" --error="${ANNOTATION_DIR_CLUSTER}/logFiles/${SPECIES}_repeatMasker.err" ./scripts/run_repeatMasker_cluster.sh ${SPECIES} ${ANNOTATION_DIR_CLUSTER} ${GENOME_DIR} ${GENOME_FILE} ${REPEAT_LIBRARY_NAME} ${RMASK_THREADS} ${RM_SPECIES}
	else
		mkdir -p "${ANNOTATION_DIR_BOTTLEROCKET}/logFiles" # create logFiles directory
		echo "starting RepeatMasker on the Bottlerocket"
		source activate maker-3.01.03
		bash "${ANNOTATION_DIR_BOTTLEROCKET}"/scripts/run_repeatMasker.sh ${SPECIES} ${GENOME_DIR} ${GENOME_FILE} ${REPEAT_LIBRARY_NAME} ${RMASK_THREADS} ${RM_SPECIES} > "${ANNOTATION_DIR_BOTTLEROCKET}/logFiles/${SPECIES}_repeatMasker.out" 2> "${ANNOTATION_DIR_BOTTLEROCKET}/logFiles/${SPECIES}_repeatMasker.error"
	fi
fi

### STEP 3 ###
## RUN BEDTOOLS TO SOFT MASK GENOME
## on the KrabLab Bottlerocket
## or on the UB CCR Vortex cluster
## using the repeat GFF generated by step 2
if [[ "${step}" == 3 ]]; then
	echo ""
	echo "INPUT VARIABLES as specified in your config file:"
	if [ -z ${ANNOTATION_DIR_BOTTLEROCKET+x} ]; then echo "  ANNOTATION_DIR_BOTTLEROCKET is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  ANNOTATION_DIR_BOTTLEROCKET='$ANNOTATION_DIR_BOTTLEROCKET'"; fi
	if [ -z ${ANNOTATION_DIR_CLUSTER+x} ]; then echo "  ANNOTATION_DIR_CLUSTER is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  ANNOTATION_DIR_CLUSTER='$ANNOTATION_DIR_CLUSTER'"; fi
	if [ -z ${SPECIES+x} ]; then echo "  SPECIES is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  SPECIES='$SPECIES'"; fi
	if [ -z ${GENOME_DIR+x} ]; then echo "  GENOME_DIR is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  GENOME_DIR='$GENOME_DIR'"; fi
	if [ -z ${GENOME_FILE+x} ]; then echo "  GENOME_FILE is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  GENOME_FILE='$GENOME_FILE'"; fi
	if [ -z ${MASKED_GENOME_FILE+x} ]; then echo "  MASKED_GENOME_FILE is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  MASKED_GENOME_FILE='$MASKED_GENOME_FILE'"; fi
	if [ -z ${USE_CLUSTER_RM+x} ]; then echo "  USE_CLUSTER_RM is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  USE_CLUSTER_RM='$USE_CLUSTER_RM'"; fi
	echo ""
	if [ ${USE_CLUSTER_RM} = "yes" ]
	then
		module load gcc/11.2.0 bedtools/2.30.0
		mkdir -p "${ANNOTATION_DIR_CLUSTER}/logFiles" # create logFiles directory
		bedtools maskfasta -bed "${ANNOTATION_DIR_CLUSTER}/${SPECIES}_RepeatMasker/final_repeat_mask/${SPECIES}.final_repeat_mask.gff3" -fi "${ANNOTATION_DIR_CLUSTER}/${GENOME_DIR}/${GENOME_FILE}" -fo "${ANNOTATION_DIR_CLUSTER}/${GENOME_DIR}/${MASKED_GENOME_FILE}" -soft
	else
		mkdir -p "${ANNOTATION_DIR_BOTTLEROCKET}/logFiles" # create logFiles directory
		bedtools maskfasta -bed "${ANNOTATION_DIR_BOTTLEROCKET}/${SPECIES}_RepeatMasker/final_repeat_mask/${SPECIES}.final_repeat_mask.gff3" -fi "${ANNOTATION_DIR_BOTTLEROCKET}/${GENOME_DIR}/${GENOME_FILE}" -fo "${ANNOTATION_DIR_BOTTLEROCKET}/${GENOME_DIR}/${MASKED_GENOME_FILE}" -soft
	fi
fi

### STEP 4 ###
## RUN HISAT2 TO MAP RNA-seq READS
## on the KrabLab Bottlerocket
## or on the UB CCR Vortex cluster
## use soft masked genome from step 3
if [[ "${step}" == 4 ]]; then
	echo ""
	echo "INPUT VARIABLES as specified in your config file:"
	if [ -z ${ANNOTATION_DIR_BOTTLEROCKET+x} ]; then echo "  ANNOTATION_DIR_BOTTLEROCKET is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  ANNOTATION_DIR_BOTTLEROCKET='$ANNOTATION_DIR_BOTTLEROCKET'"; fi
	if [ -z ${ANNOTATION_DIR_CLUSTER+x} ]; then echo "  ANNOTATION_DIR_CLUSTER is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  ANNOTATION_DIR_CLUSTER='$ANNOTATION_DIR_CLUSTER'"; fi
	if [ -z ${SPECIES+x} ]; then echo "  SPECIES is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  SPECIES='$SPECIES'"; fi
	if [ -z ${GENOME_DIR+x} ]; then echo "  GENOME_DIR is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  GENOME_DIR='$GENOME_DIR'"; fi
	if [ -z ${GENOME_FILE+x} ]; then echo "  GENOME_FILE is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  GENOME_FILE='$GENOME_FILE'"; fi
	if [ -z ${RNA_DIR+x} ]; then echo "  RNA_DIR is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  RNA_DIR='$RNA_DIR'"; fi
	if [ -z ${RNA_FILES+x} ]; then echo "  RNA_FILES is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  RNA_FILES='$RNA_FILES'"; fi
	if [ -z ${HISAT_THREADS+x} ]; then echo "  HISAT_THREADS is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  HISAT_THREADS='$HISAT_THREADS'"; fi
	if [ -z ${HISAT_RAM+x} ]; then echo "  HISAT_RAM is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  HISAT_RAM='$HISAT_RAM'"; fi
	if [ -z ${USE_CLUSTER_HISAT+x} ]; then echo "  USE_CLUSTER_HISAT is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  USE_CLUSTER_HISAT='$USE_CLUSTER_HISAT'"; fi
	echo ""
	if [ ${USE_CLUSTER_HISAT} = "yes" ]
	then
		mkdir -p "${ANNOTATION_DIR_CLUSTER}/logFiles" # create logFiles directory
		sbatch --output="${ANNOTATION_DIR_CLUSTER}/logFiles/${SPECIES}_HISAT2.out" --error="${ANNOTATION_DIR_CLUSTER}/logFiles/${SPECIES}_HISAT2.error" --ntasks-per-node=${HISAT_THREADS} --mem=${HISAT_RAM} ${ANNOTATION_DIR_CLUSTER}/scripts/run_HISAT2_cluster.sh ${SPECIES} ${GENOME_DIR} ${MASKED_GENOME_FILE} ${RNA_DIR} ${RNA_FILES} ${HISAT_THREADS} ${ANNOTATION_DIR_CLUSTER}
	else
		mkdir -p "${ANNOTATION_DIR_BOTTLEROCKET}/logFiles" # create logFiles directory
		bash "${ANNOTATION_DIR_BOTTLEROCKET}"/scripts/run_HISAT2.sh ${SPECIES} ${GENOME_DIR} ${MASKED_GENOME_FILE} ${RNA_DIR} ${RNA_FILES} ${HISAT_THREADS} > "${ANNOTATION_DIR_BOTTLEROCKET}/logFiles/${SPECIES}_HISAT2.out" 2> "${ANNOTATION_DIR_BOTTLEROCKET}/logFiles/${SPECIES}_HISAT2.error"
	fi
fi

### STEP 5 ###
## DOWNLOAD REFERENCE DATA FROM NCBI
## on the UB CCR Vortex cluster
if [[ "${step}" == 5 ]]; then
	echo ""
	echo "INPUT VARIABLES as specified in your config file:"

	if [ -z ${ANNOTATION_DIR_BOTTLEROCKET+x} ]; then echo "  ANNOTATION_DIR_BOTTLEROCKET is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  ANNOTATION_DIR_BOTTLEROCKET='$ANNOTATION_DIR_BOTTLEROCKET'"; fi
	if [ -z ${ANNOTATION_DIR_CLUSTER+x} ]; then echo "  ANNOTATION_DIR_CLUSTER is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  ANNOTATION_DIR_CLUSTER='$ANNOTATION_DIR_CLUSTER'"; fi
	if [ -z ${SPECIES+x} ]; then echo "  SPECIES is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  SPECIES='$SPECIES'"; fi
	if [ -z ${GENOME_DIR+x} ]; then echo "  GENOME_DIR is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  GENOME_DIR='$GENOME_DIR'"; fi
	if [ -z ${GENOME_FILE+x} ]; then echo "  GENOME_FILE is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  GENOME_FILE='$GENOME_FILE'"; fi
	if [ -z ${NCBI_TARGET_GENOMES+x} ]; then echo "  NCBI_TARGET_GENOMES is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  NCBI_TARGET_GENOMES='$NCBI_TARGET_GENOMES'"; fi
	if [ -z ${NCBI_DOWNLOAD_DIR+x} ]; then echo "  NCBI_DOWNLOAD_DIR is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  NCBI_DOWNLOAD_DIR='$NCBI_DOWNLOAD_DIR'"; fi
	echo ""
	mkdir -p "${ANNOTATION_DIR_CLUSTER}/logFiles" # create logFiles directory
	sbatch --job-name="${SPECIES}_NCBI_DOWNLOAD" --output="${ANNOTATION_DIR_CLUSTER}/logFiles/${SPECIES}_NCBI_DOWNLOAD.out" --error="${ANNOTATION_DIR_CLUSTER}/logFiles/${SPECIES}_NCBI_DOWNLOAD.err" ./scripts/download-ncbi-genomes.sh ${NCBI_TARGET_GENOMES} ${NCBI_DOWNLOAD_DIR} ${ANNOTATION_DIR_CLUSTER}
fi

### STEP 6 ###
## RUN BRAKER
## on the UB CCR Vortex cluster
if [[ "${step}" == 6 ]]; then
	echo ""
	echo "INPUT VARIABLES as specified in your config file:"
	if [ -z ${ANNOTATION_DIR_BOTTLEROCKET+x} ]; then echo "  ANNOTATION_DIR_BOTTLEROCKET is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  ANNOTATION_DIR_BOTTLEROCKET='$ANNOTATION_DIR_BOTTLEROCKET'"; fi
	if [ -z ${ANNOTATION_DIR_CLUSTER+x} ]; then echo "  ANNOTATION_DIR_CLUSTER is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  ANNOTATION_DIR_CLUSTER='$ANNOTATION_DIR_CLUSTER'"; fi
	if [ -z ${SPECIES+x} ]; then echo "  SPECIES is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  SPECIES='$SPECIES'"; fi
	if [ -z ${GENOME_DIR+x} ]; then echo "  GENOME_DIR is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  GENOME_DIR='$GENOME_DIR'"; fi
	if [ -z ${GENOME_FILE+x} ]; then echo "  GENOME_FILE is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  GENOME_FILE='$GENOME_FILE'"; fi
	if [ -z ${AUGUSTUS_SPECIES_NAME+x} ]; then echo "  AUGUSTUS_SPECIES_NAME is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  AUGUSTUS_SPECIES_NAME='$AUGUSTUS_SPECIES_NAME'"; fi
	if [ -z ${BRAKER_THREADS+x} ]; then echo "  BRAKER_THREADS is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  BRAKER_THREADS='$BRAKER_THREADS'"; fi
	if [ -z ${BRAKER_RAM+x} ]; then echo "  BRAKER_RAM is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  BRAKER_RAM='$BRAKER_RAM'"; fi
	if [ -z ${PROT_FASTA+x} ]; then echo "  PROT_FASTA is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  PROT_FASTA='$PROT_FASTA'"; fi
	if [ -z ${MASKED_GENOME_FILE+x} ]; then echo "  MASKED_GENOME_FILE is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  MASKED_GENOME_FILE='$MASKED_GENOME_FILE'"; fi
	echo ""
	mkdir -p "${ANNOTATION_DIR_CLUSTER}/logFiles" # create logFiles directory
	sbatch --job-name="${SPECIES}_BRAKER" --ntasks-per-node=${BRAKER_THREADS} --mem=${BRAKER_RAM} --output="${ANNOTATION_DIR_CLUSTER}/logFiles/${SPECIES}_BRAKER.out" --error="${ANNOTATION_DIR_CLUSTER}/logFiles/${SPECIES}_BRAKER.err" ./scripts/run_BRAKER.sh ${SPECIES} ${GENOME_DIR} ${MASKED_GENOME_FILE} ${PROT_FASTA} ${BRAKER_THREADS} ${ANNOTATION_DIR_CLUSTER} ${AUGUSTUS_SPECIES_NAME}
fi

### STEP 7 ###
## RUN GEMOMA
## on the UB CCR Vortex cluster
if [[ "${step}" == 7 ]]; then
	echo ""
	echo "INPUT VARIABLES as specified in your config file:"

	if [ -z ${ANNOTATION_DIR_BOTTLEROCKET+x} ]; then echo "  ANNOTATION_DIR_BOTTLEROCKET is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  ANNOTATION_DIR_BOTTLEROCKET='$ANNOTATION_DIR_BOTTLEROCKET'"; fi
	if [ -z ${ANNOTATION_DIR_CLUSTER+x} ]; then echo "  ANNOTATION_DIR_CLUSTER is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  ANNOTATION_DIR_CLUSTER='$ANNOTATION_DIR_CLUSTER'"; fi
	if [ -z ${SPECIES+x} ]; then echo "  SPECIES is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  SPECIES='$SPECIES'"; fi
	if [ -z ${GENOME_DIR+x} ]; then echo "  GENOME_DIR is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  GENOME_DIR='$GENOME_DIR'"; fi
	if [ -z ${GENOME_FILE+x} ]; then echo "  GENOME_FILE is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  GENOME_FILE='$GENOME_FILE'"; fi
	if [ -z ${GEMOMA_THREADS+x} ]; then echo "  GEMOMA_THREADS is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  GEMOMA_THREADS='$GEMOMA_THREADS'"; fi
	if [ -z ${GEMOMA_JOB_RAM+x} ]; then echo "  GEMOMA_JOB_RAM is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  GEMOMA_JOB_RAM='$GEMOMA_JOB_RAM'"; fi
	if [ -z ${GEMOMA_RAM+x} ]; then echo "  GEMOMA_RAM is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  GEMOMA_RAM='$GEMOMA_RAM'"; fi
	if [ -z ${GEMOMA_REFS+x} ]; then echo "  GEMOMA_REFS is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  GEMOMA_REFS='$GEMOMA_REFS'"; fi
	if [ -z ${USE_HISAT2_RNA_SEQ+x} ]; then echo "  USE_HISAT2_RNA_SEQ is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  USE_HISAT2_RNA_SEQ='$USE_HISAT2_RNA_SEQ'"; fi
	if [ -z ${HISAT2_RNA_LIB_TYPE+x} ]; then echo "  HISAT2_RNA_LIB_TYPE is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  HISAT2_RNA_LIB_TYPE='$HISAT2_RNA_LIB_TYPE'"; fi
	if [ -z ${USE_CUSTOM_RNA_SEQ+x} ]; then echo "  USE_CUSTOM_RNA_SEQ is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  USE_CUSTOM_RNA_SEQ='$USE_CUSTOM_RNA_SEQ'"; fi
	if [ -z ${CUSTOM_RNA_BAM+x} ]; then echo "  CUSTOM_RNA_BAM is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  CUSTOM_RNA_BAM='$CUSTOM_RNA_BAM'"; fi
	if [ -z ${CUSTOM_RNA_LIB_TYPE+x} ]; then echo "  CUSTOM_RNA_LIB_TYPE is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  CUSTOM_RNA_LIB_TYPE='$CUSTOM_RNA_LIB_TYPE'"; fi
	if [ -z ${MASKED_GENOME_FILE+x} ]; then echo "  MASKED_GENOME_FILE is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  MASKED_GENOME_FILE='$MASKED_GENOME_FILE'"; fi
	if [ -z ${GEMOMA_SCORE_AA_FILTER+x} ]; then echo "  GEMOMA_SCORE_AA_FILTER is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  GEMOMA_SCORE_AA_FILTER='$GEMOMA_SCORE_AA_FILTER'"; fi
	if [ -z ${GEMOMA_FILTER_ONLY+x} ]; then echo "  GEMOMA_FILTER_ONLY is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  GEMOMA_FILTER_ONLY='$GEMOMA_FILTER_ONLY'"; fi
	echo ""
	mkdir -p "${ANNOTATION_DIR_CLUSTER}/logFiles" # create logFiles directory
	if [[ "${USE_HISAT2_RNA_SEQ}" == "YES" ]]; then
		sbatch --job-name="${SPECIES}_GEMOMA" --ntasks-per-node=${GEMOMA_THREADS} --mem=${GEMOMA_JOB_RAM} --output="${ANNOTATION_DIR_CLUSTER}/logFiles/${SPECIES}_GEMOMA_SCORE-${GEMOMA_SCORE_AA_FILTER}.out" --error="${ANNOTATION_DIR_CLUSTER}/logFiles/${SPECIES}_GEMOMA_SCORE-${GEMOMA_SCORE_AA_FILTER}.err" ./scripts/run_GEMOMA_RNA-seq.sh ${SPECIES} ${GENOME_DIR} ${MASKED_GENOME_FILE} ${GEMOMA_THREADS} ${GEMOMA_RAM} ${ANNOTATION_DIR_CLUSTER} ${GEMOMA_REFS} ${USE_HISAT2_RNA_SEQ} ${HISAT2_RNA_LIB_TYPE} ${USE_CUSTOM_RNA_SEQ} ${CUSTOM_RNA_BAM} ${CUSTOM_RNA_LIB_TYPE} ${GEMOMA_SCORE_AA_FILTER} ${GEMOMA_FILTER_ONLY}
	elif [[ "${USE_CUSTOM_RNA_SEQ}" == "YES" ]]; then
		sbatch --job-name="${SPECIES}_GEMOMA" --ntasks-per-node=${GEMOMA_THREADS} --mem=${GEMOMA_JOB_RAM} --output="${ANNOTATION_DIR_CLUSTER}/logFiles/${SPECIES}_GEMOMA_SCORE-${GEMOMA_SCORE_AA_FILTER}.out" --error="${ANNOTATION_DIR_CLUSTER}/logFiles/${SPECIES}_GEMOMA_SCORE-${GEMOMA_SCORE_AA_FILTER}.err" ./scripts/run_GEMOMA_RNA-seq.sh ${SPECIES} ${GENOME_DIR} ${MASKED_GENOME_FILE} ${GEMOMA_THREADS} ${GEMOMA_RAM} ${ANNOTATION_DIR_CLUSTER} ${GEMOMA_REFS} ${USE_HISAT2_RNA_SEQ} ${HISAT2_RNA_LIB_TYPE} ${USE_CUSTOM_RNA_SEQ} ${CUSTOM_RNA_BAM} ${CUSTOM_RNA_LIB_TYPE} ${GEMOMA_SCORE_AA_FILTER} ${GEMOMA_FILTER_ONLY}
	else
		sbatch --job-name="${SPECIES}_GEMOMA" --ntasks-per-node=${GEMOMA_THREADS} --mem=${GEMOMA_JOB_RAM} --output="${ANNOTATION_DIR_CLUSTER}/logFiles/${SPECIES}_GEMOMA_SCORE-${GEMOMA_SCORE_AA_FILTER}.out" --error="${ANNOTATION_DIR_CLUSTER}/logFiles/${SPECIES}_GEMOMA_SCORE-${GEMOMA_SCORE_AA_FILTER}.err" ./scripts/run_GEMOMA.sh ${SPECIES} ${GENOME_DIR} ${MASKED_GENOME_FILE} ${GEMOMA_THREADS} ${GEMOMA_RAM} ${ANNOTATION_DIR_CLUSTER} ${GEMOMA_REFS} ${GEMOMA_SCORE_AA_FILTER} ${GEMOMA_FILTER_ONLY}
	fi
fi

### STEP 8 ###
## MERGE GEMOMA AND BRAKER ANNOTATIONS WITH EVIDENCEMODELER
## on the UB CCR Vortex cluster
if [[ "${step}" == 8 ]]; then
	echo ""
	echo "INPUT VARIABLES as specified in your config file:"
	if [ -z ${ANNOTATION_DIR_BOTTLEROCKET+x} ]; then echo "  ANNOTATION_DIR_BOTTLEROCKET is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  ANNOTATION_DIR_BOTTLEROCKET='$ANNOTATION_DIR_BOTTLEROCKET'"; fi
	if [ -z ${ANNOTATION_DIR_CLUSTER+x} ]; then echo "  ANNOTATION_DIR_CLUSTER is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  ANNOTATION_DIR_CLUSTER='$ANNOTATION_DIR_CLUSTER'"; fi
	if [ -z ${SPECIES+x} ]; then echo "  SPECIES is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  SPECIES='$SPECIES'"; fi
	if [ -z ${GENOME_DIR+x} ]; then echo "  GENOME_DIR is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  GENOME_DIR='$GENOME_DIR'"; fi
	if [ -z ${GENOME_FILE+x} ]; then echo "  GENOME_FILE is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  GENOME_FILE='$GENOME_FILE'"; fi
	if [ -z ${BRAKER_WEIGHT+x} ]; then echo "  BRAKER_WEIGHT is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  BRAKER_WEIGHT='$BRAKER_WEIGHT'"; fi
	if [ -z ${GEMOMA_WEIGHT+x} ]; then echo "  GEMOMA_WEIGHT is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  GEMOMA_WEIGHT='$GEMOMA_WEIGHT'"; fi
	if [ -z ${EVM_THREADS+x} ]; then echo "  EVM_THREADS is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  EVM_THREADS='$EVM_THREADS'"; fi
	if [ -z ${EVM_RAM+x} ]; then echo "  EVM_RAM is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  EVM_RAM='$EVM_RAM'"; fi
	if [ -z ${MASKED_GENOME_FILE+x} ]; then echo "  MASKED_GENOME_FILE is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  MASKED_GENOME_FILE='$MASKED_GENOME_FILE'"; fi
	if [ -z ${GEMOMA_SCORE_AA_FILTER+x} ]; then echo "  GEMOMA_SCORE_AA_FILTER is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  GEMOMA_SCORE_AA_FILTER='$GEMOMA_SCORE_AA_FILTER'"; fi
	echo ""
	mkdir -p "${ANNOTATION_DIR_CLUSTER}/logFiles" # create logFiles directory
	echo "converting BRAKER and GeMoMa files for EVM"
	cd ${ANNOTATION_DIR_CLUSTER} # create directory for EVM
	mkdir -p ${SPECIES}_EVM/B${BRAKER_WEIGHT}_G${GEMOMA_WEIGHT}-SCORE-${GEMOMA_SCORE_AA_FILTER}
	mkdir -p ${SPECIES}_EVM/B${BRAKER_WEIGHT}_G${GEMOMA_WEIGHT}-SCORE-${GEMOMA_SCORE_AA_FILTER}/evidence
	cd ${SPECIES}_EVM/B${BRAKER_WEIGHT}_G${GEMOMA_WEIGHT}-SCORE-${GEMOMA_SCORE_AA_FILTER}/evidence
	# make copies of gene predictions and merge
	cp ${ANNOTATION_DIR_CLUSTER}/${SPECIES}_BRAKER/braker.gtf braker.gtf
	cp ${ANNOTATION_DIR_CLUSTER}/${SPECIES}_GeMoMa/GeMoMa_combined/filter_score_${GEMOMA_SCORE_AA_FILTER}/final_annotation.gff gemoma.gff3
	# convert input files to EVM format
	/projects/academic/tkrabben/software/EvidenceModeler/EVidenceModeler/EvmUtils/misc/GeMoMa_gff_to_gff3.pl gemoma.gff3 > gemoma.EVM.gff3
	/projects/academic/tkrabben/software/EvidenceModeler/EVidenceModeler/EvmUtils/misc/braker_GTF_to_EVM_GFF3.pl braker.gtf > braker.EVM.gff3
	cd ${ANNOTATION_DIR_CLUSTER}
	echo "submitting EVM job"
	sbatch --job-name="${SPECIES}_EVM" --ntasks-per-node=${EVM_THREADS} --mem=${EVM_RAM} --output="${ANNOTATION_DIR_CLUSTER}/logFiles/${SPECIES}_B${BRAKER_WEIGHT}_G${GEMOMA_WEIGHT}-SCORE-${GEMOMA_SCORE_AA_FILTER}_EVM.out" --error="${ANNOTATION_DIR_CLUSTER}/logFiles/${SPECIES}_B${BRAKER_WEIGHT}_G${GEMOMA_WEIGHT}-SCORE-${GEMOMA_SCORE_AA_FILTER}_EVM.err" ./scripts/run_EVM.sh ${SPECIES} ${GENOME_DIR} ${MASKED_GENOME_FILE} ${ANNOTATION_DIR_CLUSTER} ${BRAKER_WEIGHT} ${GEMOMA_WEIGHT} ${EVM_THREADS} ${GEMOMA_SCORE_AA_FILTER}
fi

### STEP 9 ###
## RUN EGGNOG MAPPER TO GENERATE FUNCTIONAL ANNOTATIONS FOR THE EVM GENE SETS
## on the UB CCR Vortex cluster
if [[ "${step}" == 9 ]]; then
	echo ""
	echo "INPUT VARIABLES as specified in your config file:"
	if [ -z ${ANNOTATION_DIR_BOTTLEROCKET+x} ]; then echo "  ANNOTATION_DIR_BOTTLEROCKET is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  ANNOTATION_DIR_BOTTLEROCKET='$ANNOTATION_DIR_BOTTLEROCKET'"; fi
	if [ -z ${ANNOTATION_DIR_CLUSTER+x} ]; then echo "  ANNOTATION_DIR_CLUSTER is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  ANNOTATION_DIR_CLUSTER='$ANNOTATION_DIR_CLUSTER'"; fi
	if [ -z ${SPECIES+x} ]; then echo "  SPECIES is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  SPECIES='$SPECIES'"; fi
	if [ -z ${GENOME_DIR+x} ]; then echo "  GENOME_DIR is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  GENOME_DIR='$GENOME_DIR'"; fi
	if [ -z ${GENOME_FILE+x} ]; then echo "  GENOME_FILE is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  GENOME_FILE='$GENOME_FILE'"; fi
	if [ -z ${BRAKER_WEIGHT_EGG+x} ]; then echo "  BRAKER_WEIGHT_EGG is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  BRAKER_WEIGHT_EGG='$BRAKER_WEIGHT_EGG'"; fi
	if [ -z ${GEMOMA_WEIGHT_EGG+x} ]; then echo "  GEMOMA_WEIGHT_EGG is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  GEMOMA_WEIGHT_EGG='$GEMOMA_WEIGHT_EGG'"; fi
	if [ -z ${GEMOMA_SCORE_AA_FILTER+x} ]; then echo "  GEMOMA_SCORE_AA_FILTER is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  GEMOMA_SCORE_AA_FILTER='$GEMOMA_SCORE_AA_FILTER'"; fi
	if [ -z ${EGG_THREADS+x} ]; then echo "  EGG_THREADS is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  EGG_THREADS='$EGG_THREADS'"; fi
	if [ -z ${EGG_RAM+x} ]; then echo "  EGG_RAM is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  EGG_RAM='$EGG_RAM'"; fi
	if [ -z ${EGGNOG_OPTIONS+x} ]; then echo "  EGGNOG_OPTIONS is unset"; echo "  please ensure all variables are specified in your config file"; exit 1; else echo "  EGGNOG_OPTIONS='$EGGNOG_OPTIONS'"; fi
	echo ""
	cd ${ANNOTATION_DIR_CLUSTER}
	mkdir -p ${SPECIES}_eggNOG/B${BRAKER_WEIGHT_EGG}_G${GEMOMA_WEIGHT_EGG}-SCORE-${GEMOMA_SCORE_AA_FILTER}
	echo "submitting eggNOG mapper job"
	sbatch --job-name="${SPECIES}_eggNOG" --ntasks-per-node=${EGG_THREADS} --mem=${EGG_RAM} --output="${ANNOTATION_DIR_CLUSTER}/logFiles/${SPECIES}_B${BRAKER_WEIGHT_EGG}_G${GEMOMA_WEIGHT_EGG}-SCORE-${GEMOMA_SCORE_AA_FILTER}_EVM_eggNOG.out" --error="${ANNOTATION_DIR_CLUSTER}/logFiles/${SPECIES}_B${BRAKER_WEIGHT_EGG}_G${GEMOMA_WEIGHT_EGG}-SCORE-${GEMOMA_SCORE_AA_FILTER}_EVM_eggNOG.err" ./scripts/run_eggNOG.sh ${SPECIES}  ${ANNOTATION_DIR_CLUSTER} ${BRAKER_WEIGHT_EGG} ${GEMOMA_WEIGHT_EGG} ${EGG_THREADS} ${EGGNOG_OPTIONS} ${GEMOMA_SCORE_AA_FILTER}
fi
